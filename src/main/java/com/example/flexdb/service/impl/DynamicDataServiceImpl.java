package com.example.flexdb.service.impl;

import com.example.flexdb.dto.PageInfo;
import com.example.flexdb.dto.PaginatedResponse;
import com.example.flexdb.entity.DynamicColumnDefinition;
import com.example.flexdb.entity.DynamicTableDefinition;
import com.example.flexdb.exception.ResourceNotFoundException;
import com.example.flexdb.repository.DynamicTableDefinitionRepository;
import com.example.flexdb.service.DynamicDataService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class DynamicDataServiceImpl implements DynamicDataService {

    private final DynamicTableDefinitionRepository tableRepo;
    private final JdbcTemplate jdbcTemplate;

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É.
     *
     * @param tableName –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
     * @param data      –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
     * @return –∫–∞—Ä—Ç–∞ —Å ID –∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    @Override
    @Transactional
    public Map<String, Object> insertRow(String tableName, Map<String, Object> data) {
        log.info("‚ñ∂Ô∏è –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É '{}'", tableName);

        DynamicTableDefinition table = tableRepo.findByTableName(tableName)
                .orElseThrow(() -> new ResourceNotFoundException("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        List<DynamicColumnDefinition> columns = table.getColumns();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        Set<String> knownColumns = columns.stream()
                .filter(col -> !col.isPrimaryKeyInternal())
                .map(DynamicColumnDefinition::getColumnName)
                .collect(Collectors.toSet());

        for (String key : data.keySet()) {
            if (!knownColumns.contains(key)) {
                throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: '" + key + "'");
            }
        }

        for (DynamicColumnDefinition col : columns) {
            if (col.isPrimaryKeyInternal()) continue;
            String colName = col.getColumnName();
            Object value = data.get(colName);

            if (!col.isNullable() && value == null) {
                throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + colName + "' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
            }

            if (value != null) {
                validateValueType(colName, col.getColumnType(), value);
            }
        }

        List<String> columnNames = new ArrayList<>(data.keySet());
        List<Object> values = columnNames.stream().map(data::get).toList();

        String sql = String.format(
                "INSERT INTO \"%s\" (%s) VALUES (%s) RETURNING id",
                tableName,
                columnNames.stream().map(col -> "\"" + col + "\"").collect(Collectors.joining(", ")),
                columnNames.stream().map(col -> "?").collect(Collectors.joining(", "))
        );

        log.debug("üì• SQL: {}", sql);
        log.debug("üì¶ Params: {}", values);

        Long id = jdbcTemplate.query(sql, values.toArray(), rs -> rs.next() ? rs.getLong("id") : null);

        if (id == null) {
            throw new IllegalStateException("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ ID");
        }

        Map<String, Object> result = new LinkedHashMap<>();
        result.put("id", id);
        result.putAll(data);

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É '{}', ID: {}", tableName, id);
        return result;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
     *
     * @param tableName –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
     * @param page      –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param size      —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @return –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
     */
    @Override
    @Transactional(readOnly = true) // readOnly —Ç–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º –∏–∑ –±–¥
    public PaginatedResponse getPaginatedData(String tableName, int page, int size) {

        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {} (—Ä–∞–∑–º–µ—Ä {}) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{}'", page, size, tableName);

        tableRepo.findByTableName(tableName)
                .orElseThrow(() -> new ResourceNotFoundException("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        int maxSize = 100;
        int safeSize = Math.min(size, maxSize);
        int offset = page * safeSize;

        String sql = String.format("SELECT * FROM \"%s\" ORDER BY id ASC LIMIT ? OFFSET ?", tableName);
        List<Map<String, Object>> content = jdbcTemplate.queryForList(sql, safeSize, offset);

        String countSql = String.format("SELECT COUNT(*) FROM \"%s\"", tableName);
        Integer totalElementsRaw = jdbcTemplate.queryForObject(countSql, Integer.class);
        int totalElements = totalElementsRaw != null ? totalElementsRaw : 0;

        int totalPages = (int) Math.ceil((double) totalElements / safeSize);

        return new PaginatedResponse(
                content,
                new PageInfo(page, safeSize),
                totalPages,
                totalElements,
                page == totalPages - 1,
                page == 0
        );
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID.
     */

    @Override
    @Transactional(readOnly = true) // readOnly —Ç–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º –∏–∑ –±–¥
    public Map<String, Object> getRowById(String tableName, Long id) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ id = {} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{}'", id, tableName);

        tableRepo.findByTableName(tableName)
                .orElseThrow(() -> new ResourceNotFoundException("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        String sql = String.format("SELECT * FROM \"%s\" WHERE id = ?", tableName);
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, id);

        if (rows.isEmpty()) {
            throw new ResourceNotFoundException("–ó–∞–ø–∏—Å—å —Å id " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ '" + tableName + "'");
        }

        return rows.get(0);
    }

    /**
     * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID.
     */

    @Override
    @Transactional
    public Map<String, Object> updateRow(String tableName, Long id, Map<String, Object> data) {
        log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ id = {} –≤ —Ç–∞–±–ª–∏—Ü–µ '{}'", id, tableName);

        DynamicTableDefinition table = tableRepo.findByTableName(tableName)
                .orElseThrow(() -> new ResourceNotFoundException("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        String checkSql = String.format("SELECT COUNT(*) FROM \"%s\" WHERE id = ?", tableName);
        Integer count = jdbcTemplate.queryForObject(checkSql, Integer.class, id);
        if (count == null || count == 0) {
            throw new ResourceNotFoundException("–ó–∞–ø–∏—Å—å —Å id " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ '" + tableName + "'");
        }

        List<DynamicColumnDefinition> columns = table.getColumns();

        Set<String> knownColumns = columns.stream()
                .filter(col -> !col.isPrimaryKeyInternal())
                .map(DynamicColumnDefinition::getColumnName)
                .collect(Collectors.toSet());

        for (String key : data.keySet()) {
            if (!knownColumns.contains(key)) {
                throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: '" + key + "'");
            }
        }

        for (DynamicColumnDefinition col : columns) {
            if (col.isPrimaryKeyInternal()) continue;
            String colName = col.getColumnName();
            Object value = data.get(colName);

            if (!col.isNullable() && value == null) {
                throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + colName + "' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
            }

            if (value != null) {
                validateValueType(colName, col.getColumnType(), value);
            }
        }

        List<String> setClauses = new ArrayList<>();
        List<Object> values = new ArrayList<>();

        for (String col : data.keySet()) {
            setClauses.add("\"" + col + "\" = ?");
            values.add(data.get(col));
        }

        values.add(id);

        String sql = String.format(
                "UPDATE \"%s\" SET %s WHERE id = ?",
                tableName,
                String.join(", ", setClauses)
        );

        jdbcTemplate.update(sql, values.toArray());
        log.info("‚úÖ –ó–∞–ø–∏—Å—å id = {} –≤ —Ç–∞–±–ª–∏—Ü–µ '{}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", id, tableName);

        return getRowById(tableName, id);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
     */
    @Override
    @Transactional
    public void deleteById(String tableName, Long id) {

        log.info("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ id = {} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{}'", id, tableName);

        tableRepo.findByTableName(tableName)
                .orElseThrow(() -> new ResourceNotFoundException("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        String sql = String.format("DELETE FROM \"%s\" WHERE id = ?", tableName);
        int rowsAffected = jdbcTemplate.update(sql, id);

        if (rowsAffected == 0) {
            throw new ResourceNotFoundException("–ó–∞–ø–∏—Å—å —Å id = " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ '" + tableName + "'");
        }

        log.info("–ó–∞–ø–∏—Å—å id = {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{}'", id, tableName);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ç–∏–ø—É –∫–æ–ª–æ–Ω–∫–∏.
     */
    private void validateValueType(String columnName, String columnType, Object value) {
        switch (columnType.toUpperCase()) {
            case "TEXT", "DATE", "TIMESTAMP" -> {
                if (!(value instanceof String)) {
                    throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + columnName + "' –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (TEXT), –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: " + value.getClass().getSimpleName());
                }
            }
            case "INTEGER" -> {
                if (!(value instanceof Integer)) {
                    throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + columnName + "' –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (INTEGER), –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: " + value.getClass().getSimpleName());
                }
            }
            case "BIGINT" -> {
                if (!(value instanceof Integer || value instanceof Long)) {
                    throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + columnName + "' –æ–∂–∏–¥–∞–µ—Ç –±–æ–ª—å—à–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (BIGINT), –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: " + value.getClass().getSimpleName());
                }
            }
            case "DECIMAL" -> {
                if (!(value instanceof Number)) {
                    throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + columnName + "' –æ–∂–∏–¥–∞–µ—Ç —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π (DECIMAL), –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: " + value.getClass().getSimpleName());
                }
            }
            case "BOOLEAN" -> {
                if (!(value instanceof Boolean)) {
                    throw new IllegalArgumentException("–ö–æ–ª–æ–Ω–∫–∞ '" + columnName + "' –æ–∂–∏–¥–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (BOOLEAN), –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: " + value.getClass().getSimpleName());
                }
            }
            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏: " + columnType);
        }
    }
}